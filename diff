diff --git a/Makefile b/Makefile
index c65969a..f59a1f9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,4 @@
-CFLAGS = -Wall -Wextra -std=c89 -pedantic
+CFLAGS = -Wall -Wextra -std=c89 -pedantic -g3
 #-Werror
 
 all: options cnes
@@ -11,7 +11,7 @@ options:
 %.o: %.c
 	$(CC) -c $(CFLAGS) $<
 
-cnes: cpu.o mem.o
+cnes: cpu.o mem.o nes.o
 	$(CC) -o $@ $^
 
 clean:
diff --git a/cpu.c b/cpu.c
index e3bcb33..49a1c28 100644
--- a/cpu.c
+++ b/cpu.c
@@ -21,6 +21,29 @@ typedef uint8_t (*opcode_func)(mos6502 *, uint16_t, uint8_t, addr_mode);
 /* opcodes */
 /* http://obelisk.me.uk/6502/reference.html */
 
+static uint8_t fetch_opcode(mos6502 *, uint8_t *, uint8_t);
+static uint8_t read_byte(uint8_t *, uint8_t, uint8_t);
+static void OP_LDA(mos6502 *, uint8_t *, uint8_t, addr_mode);
+
+static void
+OP_LDA(mos6502 *cpu, uint8_t *mem, uint8_t cycles, addr_mode mode)
+{
+	uint8_t zp_addr;
+	fprintf(stderr, "OP_LDA_%d\n", mode);
+
+	if (mode == IMMEDIATE) {
+		cpu->A = fetch_opcode(cpu, mem, cycles);
+	}
+
+	if (mode == ZERO_PAGE) {
+		zp_addr = fetch_opcode(cpu, mem, cycles);
+		cpu->A = read_byte(mem, zp_addr, cycles);
+	}
+
+	set_flag(cpu, MASK_ZERO, cpu->A == 0); /* TODO rewrite!! */
+	set_flag(cpu, MASK_NEGATIVE, cpu->A & 0x80); /* TODO rewrite!! */
+}
+
 /*
 static uint8_t OP_ADC(mos6502 *, uint16_t, uint8_t, addr_mode);
 static uint8_t OP_AND(mos6502 *, uint16_t, uint8_t, addr_mode);
@@ -108,7 +131,8 @@ static void reset(void);
 static void set_irq(void);
 static void set_nmi(void);*/
 
-uint8_t fetch_opcode(mos6502 *cpu, uint8_t *mem, uint8_t cycles)
+static uint8_t
+fetch_opcode(mos6502 *cpu, uint8_t *mem, uint8_t cycles)
 {
 	uint8_t data = mem[cpu->PC];
 	(cpu->PC)++;
@@ -116,6 +140,14 @@ uint8_t fetch_opcode(mos6502 *cpu, uint8_t *mem, uint8_t cycles)
 	return data;
 }
 
+static uint8_t
+read_byte(uint8_t *mem, uint8_t address, uint8_t cycles)
+{
+	uint8_t data = mem[address];
+	cycles--;
+	return data;
+}
+
 void
 execute(mos6502 *cpu, uint8_t *mem, uint8_t cycles)
 {
@@ -123,6 +155,19 @@ execute(mos6502 *cpu, uint8_t *mem, uint8_t cycles)
 
 	while (cycles > 0) {
 		opcode = fetch_opcode(cpu, mem, cycles);
+
+		switch (opcode) {
+			/* TODO arrange opcodes somehow */
+			case 0xA9: /* INS_LDA_IM */
+				OP_LDA(cpu, mem, cycles, IMMEDIATE);
+				break;
+			case 0xA5: /* INS_LDA_ZP */
+				OP_LDA(cpu, mem, cycles, ZERO_PAGE);
+				break;
+			default:
+				fprintf(stderr, "ERROR: UNKNOWN OPCODE!\n");
+				break;
+		}
 	}
 }
 
diff --git a/mem.c b/mem.c
index 6291a12..ba98a0a 100644
--- a/mem.c
+++ b/mem.c
@@ -3,16 +3,10 @@
 
 #include "mem.h"
 
+/*uint8_t RAM[RAM_SIZE];*/
+
 void
 mem_reset(uint8_t *mem)
 {
 	memset(mem, 0, RAM_SIZE);
 }
-
-int
-main(void)
-{
-	/* mock for building */
-	fprintf(stdout, "INFO:building done\n");
-	return 0;
-}
diff --git a/mem.h b/mem.h
index 3d56db1..3055cd6 100644
--- a/mem.h
+++ b/mem.h
@@ -5,8 +5,6 @@
 
 #define RAM_SIZE 0x10000
 
-uint8_t RAM[RAM_SIZE];
-
 void mem_reset(uint8_t *);
 
 #endif /* NES_MEM_H */
